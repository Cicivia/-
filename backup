import torch
import torch.nn as nn
import torch.optim as optim

class CBDNet(nn.Module):
    def __init__(self):
        super(CBDNet, self).__init__()
        self.conv1 = nn.Conv2d(3, 64, kernel_size=3, stride=1, padding=1)
        self.conv2 = nn.Conv2d(67, 64, kernel_size=3, stride=1, padding=1)
        self.conv3 = nn.Conv2d(131, 64, kernel_size=3, stride=1, padding=1)
        self.conv4 = nn.Conv2d(195, 64, kernel_size=3, stride=1, padding=1)
        self.conv5 = nn.Conv2d(259, 3, kernel_size=3, stride=1, padding=1)
        self.relu = nn.ReLU(inplace=True)

    def forward(self, x):
        input = x
        x1 = self.relu(self.conv1(x))
        x2 = torch.cat((input, x1), dim=1)

        x3 = self.relu(self.conv2(x2))
        x4 = torch.cat((input, x1, x3), dim=1)

        x5 = self.relu(self.conv3(x4))
        x6 = torch.cat((input, x1, x3, x5), dim=1)

        x7 = self.relu(self.conv4(x6))
        x8 = torch.cat((input, x1, x3, x5, x7), dim=1)

        output = self.conv5(x8)
        output = torch.clamp(output, 0., 1.)

        return output

# 数据加载和预处理
def load_data():
    # 在这里加载并预处理你的数据，返回训练集和测试集

# 训练模型
def train(model, train_loader, num_epochs):
    criterion = nn.MSELoss()
    optimizer = optim.Adam(model.parameters(), lr=0.001)

    for epoch in range(num_epochs):
        running_loss = 0.0
        for images, labels in train_loader:
            optimizer.zero_grad()
            outputs = model(images)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()
            running_loss += loss.item()
        
        print(f"Epoch {epoch+1}: Loss = {running_loss / len(train_loader)}")

# 测试模型
def test(model, test_loader):
    criterion = nn.MSELoss()
    total_loss = 0.0
    with torch.no_grad():
        for images, labels in test_loader:
            outputs = model(images)
            loss = criterion(outputs, labels)
            total_loss += loss.item()
    
    print(f"Test Loss: {total_loss / len(test_loader)}")

# 主函数
def main():
    # 加载数据
    train_loader, test_loader = load_data()

    # 初始化模型
    model = CBDNet()

    # 训练模型
    num_epochs = 10
    train(model, train_loader, num_epochs)
    
    # 测试模型
    test(model, test_loader)

if __name__ == '__main__':
    main()
